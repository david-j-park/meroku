#!/bin/node

//Post receive hook using node.
var childp = require('child_process')
        , fs = require('fs-extra')
        , redis = require('redis')
        , async = require('async')
        , appRepository = require('./lib/appRepository')
        , hipacheUtils = require('./lib/hipacheUtils')
        , docker = require('./lib/docker');

//application to be deployed
var appDetails, port;

console.log('Thanks! Let me deploy that for you.');

//set up build context
var repodir = process.cwd();
console.log('Working in: ' + process.cwd());
var workDir = process.cwd() + '/hooks/lib';
var appname = repodir.split('/').pop();
console.log('Your repo: ' + appname);

// use a homed directory for testing only. In prod, this would be a shared location.
var buildsDir = '/home/dpark/builds/';
var buildDir = buildsDir + appname + '/' + new Date().getTime();
fs.ensureDirSync(buildDir);
console.log('Directory created: ' + buildDir);

async.waterfall([
    newVersion,
    appInfo,
    checkout,
    build,
    run,
    register
], function(err, results) {
    if (err) {
        console.log(err.toString('utf8'));
        cleanup(true);
    }
    else {
        console.log('App is ready at http://' + results);
        cleanup(false);
    }
});


function checkout(app, cb) {
    childp.exec('git checkout -f master', {
        env: {
            "GIT_WORK_TREE": buildDir
        }
    }, function(err, stdout, stderr) {
        if (err) {
            console.log(err);
            cb(err, null);
        }
        cb(null, stdout.toString('utf8'));

    });
}

function newVersion(cb) {
    appRepository.bumpVersion(appname, function(err, v) {
        cb(err, v);
    })
}

function appInfo(version, cb) {
    appRepository.appInfo(appname, function(err, app) {
        appDetails = app;
        cb(err, app);
    });
}

function cleanup(forceExit) {
    fs.removeSync(buildDir);
    if (forceExit)
        process.exit(1);
    else
        process.exit(0);
}

function build(arg1, cb) {
    docker(appDetails, buildDir, workDir, childp).doBuild(function(err, result) {
        cb(err, result);
    });
}

function run(arg1, cb) {
    docker(appDetails, buildDir, workDir, childp).runContainer(function(err, results) {
        port = results[2];
        cb(err, results);
    });
}

function register(port, cb) {
    hipacheUtils.registerAppListener(appDetails.info.name,
            (process.env.DOCKER_HOST || 'http://localhost') + ':' + port,
            function(err, result) {
                if (err) console.log('ERROR: ' + err.toString('utf8'));
                cb(err, result);
            });
}